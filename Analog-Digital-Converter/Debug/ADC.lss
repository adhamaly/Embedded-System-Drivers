
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001376  000013ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000b88  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005cb  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00002647  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000146  00000000  00000000  00002747  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152c  00000000  00000000  0000288d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4b  00000000  00000000  00003db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6b  00000000  00000000  00004a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00005470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025d  00000000  00000000  00005570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000452  00000000  00000000  000057cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d5 08 	call	0x11aa	; 0x11aa <main>
      7a:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__divsf3>:
      82:	a8 e1       	ldi	r26, 0x18	; 24
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e7 e4       	ldi	r30, 0x47	; 71
      88:	f0 e0       	ldi	r31, 0x00	; 0
      8a:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__prologue_saves__+0x10>
      8e:	69 83       	std	Y+1, r22	; 0x01
      90:	7a 83       	std	Y+2, r23	; 0x02
      92:	8b 83       	std	Y+3, r24	; 0x03
      94:	9c 83       	std	Y+4, r25	; 0x04
      96:	2d 83       	std	Y+5, r18	; 0x05
      98:	3e 83       	std	Y+6, r19	; 0x06
      9a:	4f 83       	std	Y+7, r20	; 0x07
      9c:	58 87       	std	Y+8, r21	; 0x08
      9e:	b9 e0       	ldi	r27, 0x09	; 9
      a0:	eb 2e       	mov	r14, r27
      a2:	f1 2c       	mov	r15, r1
      a4:	ec 0e       	add	r14, r28
      a6:	fd 1e       	adc	r15, r29
      a8:	ce 01       	movw	r24, r28
      aa:	01 96       	adiw	r24, 0x01	; 1
      ac:	b7 01       	movw	r22, r14
      ae:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__unpack_f>
      b2:	8e 01       	movw	r16, r28
      b4:	0f 5e       	subi	r16, 0xEF	; 239
      b6:	1f 4f       	sbci	r17, 0xFF	; 255
      b8:	ce 01       	movw	r24, r28
      ba:	05 96       	adiw	r24, 0x05	; 5
      bc:	b8 01       	movw	r22, r16
      be:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__unpack_f>
      c2:	29 85       	ldd	r18, Y+9	; 0x09
      c4:	22 30       	cpi	r18, 0x02	; 2
      c6:	08 f4       	brcc	.+2      	; 0xca <__divsf3+0x48>
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__divsf3+0x144>
      ca:	39 89       	ldd	r19, Y+17	; 0x11
      cc:	32 30       	cpi	r19, 0x02	; 2
      ce:	10 f4       	brcc	.+4      	; 0xd4 <__divsf3+0x52>
      d0:	b8 01       	movw	r22, r16
      d2:	7c c0       	rjmp	.+248    	; 0x1cc <__divsf3+0x14a>
      d4:	8a 85       	ldd	r24, Y+10	; 0x0a
      d6:	9a 89       	ldd	r25, Y+18	; 0x12
      d8:	89 27       	eor	r24, r25
      da:	8a 87       	std	Y+10, r24	; 0x0a
      dc:	24 30       	cpi	r18, 0x04	; 4
      de:	11 f0       	breq	.+4      	; 0xe4 <__divsf3+0x62>
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 f4       	brne	.+12     	; 0xf0 <__divsf3+0x6e>
      e4:	23 17       	cp	r18, r19
      e6:	09 f0       	breq	.+2      	; 0xea <__divsf3+0x68>
      e8:	6e c0       	rjmp	.+220    	; 0x1c6 <__divsf3+0x144>
      ea:	60 e6       	ldi	r22, 0x60	; 96
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	6e c0       	rjmp	.+220    	; 0x1cc <__divsf3+0x14a>
      f0:	34 30       	cpi	r19, 0x04	; 4
      f2:	39 f4       	brne	.+14     	; 0x102 <__divsf3+0x80>
      f4:	1d 86       	std	Y+13, r1	; 0x0d
      f6:	1e 86       	std	Y+14, r1	; 0x0e
      f8:	1f 86       	std	Y+15, r1	; 0x0f
      fa:	18 8a       	std	Y+16, r1	; 0x10
      fc:	1c 86       	std	Y+12, r1	; 0x0c
      fe:	1b 86       	std	Y+11, r1	; 0x0b
     100:	04 c0       	rjmp	.+8      	; 0x10a <__divsf3+0x88>
     102:	32 30       	cpi	r19, 0x02	; 2
     104:	21 f4       	brne	.+8      	; 0x10e <__divsf3+0x8c>
     106:	84 e0       	ldi	r24, 0x04	; 4
     108:	89 87       	std	Y+9, r24	; 0x09
     10a:	b7 01       	movw	r22, r14
     10c:	5f c0       	rjmp	.+190    	; 0x1cc <__divsf3+0x14a>
     10e:	2b 85       	ldd	r18, Y+11	; 0x0b
     110:	3c 85       	ldd	r19, Y+12	; 0x0c
     112:	8b 89       	ldd	r24, Y+19	; 0x13
     114:	9c 89       	ldd	r25, Y+20	; 0x14
     116:	28 1b       	sub	r18, r24
     118:	39 0b       	sbc	r19, r25
     11a:	3c 87       	std	Y+12, r19	; 0x0c
     11c:	2b 87       	std	Y+11, r18	; 0x0b
     11e:	ed 84       	ldd	r14, Y+13	; 0x0d
     120:	fe 84       	ldd	r15, Y+14	; 0x0e
     122:	0f 85       	ldd	r16, Y+15	; 0x0f
     124:	18 89       	ldd	r17, Y+16	; 0x10
     126:	ad 88       	ldd	r10, Y+21	; 0x15
     128:	be 88       	ldd	r11, Y+22	; 0x16
     12a:	cf 88       	ldd	r12, Y+23	; 0x17
     12c:	d8 8c       	ldd	r13, Y+24	; 0x18
     12e:	ea 14       	cp	r14, r10
     130:	fb 04       	cpc	r15, r11
     132:	0c 05       	cpc	r16, r12
     134:	1d 05       	cpc	r17, r13
     136:	40 f4       	brcc	.+16     	; 0x148 <__divsf3+0xc6>
     138:	ee 0c       	add	r14, r14
     13a:	ff 1c       	adc	r15, r15
     13c:	00 1f       	adc	r16, r16
     13e:	11 1f       	adc	r17, r17
     140:	21 50       	subi	r18, 0x01	; 1
     142:	30 40       	sbci	r19, 0x00	; 0
     144:	3c 87       	std	Y+12, r19	; 0x0c
     146:	2b 87       	std	Y+11, r18	; 0x0b
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b0 e4       	ldi	r27, 0x40	; 64
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	ea 14       	cp	r14, r10
     15e:	fb 04       	cpc	r15, r11
     160:	0c 05       	cpc	r16, r12
     162:	1d 05       	cpc	r17, r13
     164:	40 f0       	brcs	.+16     	; 0x176 <__divsf3+0xf4>
     166:	28 2b       	or	r18, r24
     168:	39 2b       	or	r19, r25
     16a:	4a 2b       	or	r20, r26
     16c:	5b 2b       	or	r21, r27
     16e:	ea 18       	sub	r14, r10
     170:	fb 08       	sbc	r15, r11
     172:	0c 09       	sbc	r16, r12
     174:	1d 09       	sbc	r17, r13
     176:	b6 95       	lsr	r27
     178:	a7 95       	ror	r26
     17a:	97 95       	ror	r25
     17c:	87 95       	ror	r24
     17e:	ee 0c       	add	r14, r14
     180:	ff 1c       	adc	r15, r15
     182:	00 1f       	adc	r16, r16
     184:	11 1f       	adc	r17, r17
     186:	6f 5f       	subi	r22, 0xFF	; 255
     188:	7f 4f       	sbci	r23, 0xFF	; 255
     18a:	6f 31       	cpi	r22, 0x1F	; 31
     18c:	71 05       	cpc	r23, r1
     18e:	31 f7       	brne	.-52     	; 0x15c <__divsf3+0xda>
     190:	da 01       	movw	r26, r20
     192:	c9 01       	movw	r24, r18
     194:	8f 77       	andi	r24, 0x7F	; 127
     196:	90 70       	andi	r25, 0x00	; 0
     198:	a0 70       	andi	r26, 0x00	; 0
     19a:	b0 70       	andi	r27, 0x00	; 0
     19c:	80 34       	cpi	r24, 0x40	; 64
     19e:	91 05       	cpc	r25, r1
     1a0:	a1 05       	cpc	r26, r1
     1a2:	b1 05       	cpc	r27, r1
     1a4:	61 f4       	brne	.+24     	; 0x1be <__divsf3+0x13c>
     1a6:	27 fd       	sbrc	r18, 7
     1a8:	0a c0       	rjmp	.+20     	; 0x1be <__divsf3+0x13c>
     1aa:	e1 14       	cp	r14, r1
     1ac:	f1 04       	cpc	r15, r1
     1ae:	01 05       	cpc	r16, r1
     1b0:	11 05       	cpc	r17, r1
     1b2:	29 f0       	breq	.+10     	; 0x1be <__divsf3+0x13c>
     1b4:	20 5c       	subi	r18, 0xC0	; 192
     1b6:	3f 4f       	sbci	r19, 0xFF	; 255
     1b8:	4f 4f       	sbci	r20, 0xFF	; 255
     1ba:	5f 4f       	sbci	r21, 0xFF	; 255
     1bc:	20 78       	andi	r18, 0x80	; 128
     1be:	2d 87       	std	Y+13, r18	; 0x0d
     1c0:	3e 87       	std	Y+14, r19	; 0x0e
     1c2:	4f 87       	std	Y+15, r20	; 0x0f
     1c4:	58 8b       	std	Y+16, r21	; 0x10
     1c6:	be 01       	movw	r22, r28
     1c8:	67 5f       	subi	r22, 0xF7	; 247
     1ca:	7f 4f       	sbci	r23, 0xFF	; 255
     1cc:	cb 01       	movw	r24, r22
     1ce:	0e 94 15 02 	call	0x42a	; 0x42a <__pack_f>
     1d2:	68 96       	adiw	r28, 0x18	; 24
     1d4:	ea e0       	ldi	r30, 0x0A	; 10
     1d6:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__epilogue_restores__+0x10>

000001da <__gtsf2>:
     1da:	a8 e1       	ldi	r26, 0x18	; 24
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e3 ef       	ldi	r30, 0xF3	; 243
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__prologue_saves__+0x18>
     1e6:	69 83       	std	Y+1, r22	; 0x01
     1e8:	7a 83       	std	Y+2, r23	; 0x02
     1ea:	8b 83       	std	Y+3, r24	; 0x03
     1ec:	9c 83       	std	Y+4, r25	; 0x04
     1ee:	2d 83       	std	Y+5, r18	; 0x05
     1f0:	3e 83       	std	Y+6, r19	; 0x06
     1f2:	4f 83       	std	Y+7, r20	; 0x07
     1f4:	58 87       	std	Y+8, r21	; 0x08
     1f6:	89 e0       	ldi	r24, 0x09	; 9
     1f8:	e8 2e       	mov	r14, r24
     1fa:	f1 2c       	mov	r15, r1
     1fc:	ec 0e       	add	r14, r28
     1fe:	fd 1e       	adc	r15, r29
     200:	ce 01       	movw	r24, r28
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	b7 01       	movw	r22, r14
     206:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__unpack_f>
     20a:	8e 01       	movw	r16, r28
     20c:	0f 5e       	subi	r16, 0xEF	; 239
     20e:	1f 4f       	sbci	r17, 0xFF	; 255
     210:	ce 01       	movw	r24, r28
     212:	05 96       	adiw	r24, 0x05	; 5
     214:	b8 01       	movw	r22, r16
     216:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__unpack_f>
     21a:	89 85       	ldd	r24, Y+9	; 0x09
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	40 f0       	brcs	.+16     	; 0x230 <__gtsf2+0x56>
     220:	89 89       	ldd	r24, Y+17	; 0x11
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	28 f0       	brcs	.+10     	; 0x230 <__gtsf2+0x56>
     226:	c7 01       	movw	r24, r14
     228:	b8 01       	movw	r22, r16
     22a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fpcmp_parts_f>
     22e:	01 c0       	rjmp	.+2      	; 0x232 <__gtsf2+0x58>
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	68 96       	adiw	r28, 0x18	; 24
     234:	e6 e0       	ldi	r30, 0x06	; 6
     236:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__epilogue_restores__+0x18>

0000023a <__lesf2>:
     23a:	a8 e1       	ldi	r26, 0x18	; 24
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e3 e2       	ldi	r30, 0x23	; 35
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__prologue_saves__+0x18>
     246:	69 83       	std	Y+1, r22	; 0x01
     248:	7a 83       	std	Y+2, r23	; 0x02
     24a:	8b 83       	std	Y+3, r24	; 0x03
     24c:	9c 83       	std	Y+4, r25	; 0x04
     24e:	2d 83       	std	Y+5, r18	; 0x05
     250:	3e 83       	std	Y+6, r19	; 0x06
     252:	4f 83       	std	Y+7, r20	; 0x07
     254:	58 87       	std	Y+8, r21	; 0x08
     256:	89 e0       	ldi	r24, 0x09	; 9
     258:	e8 2e       	mov	r14, r24
     25a:	f1 2c       	mov	r15, r1
     25c:	ec 0e       	add	r14, r28
     25e:	fd 1e       	adc	r15, r29
     260:	ce 01       	movw	r24, r28
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	b7 01       	movw	r22, r14
     266:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__unpack_f>
     26a:	8e 01       	movw	r16, r28
     26c:	0f 5e       	subi	r16, 0xEF	; 239
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	ce 01       	movw	r24, r28
     272:	05 96       	adiw	r24, 0x05	; 5
     274:	b8 01       	movw	r22, r16
     276:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__unpack_f>
     27a:	89 85       	ldd	r24, Y+9	; 0x09
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	40 f0       	brcs	.+16     	; 0x290 <__lesf2+0x56>
     280:	89 89       	ldd	r24, Y+17	; 0x11
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	28 f0       	brcs	.+10     	; 0x290 <__lesf2+0x56>
     286:	c7 01       	movw	r24, r14
     288:	b8 01       	movw	r22, r16
     28a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fpcmp_parts_f>
     28e:	01 c0       	rjmp	.+2      	; 0x292 <__lesf2+0x58>
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	68 96       	adiw	r28, 0x18	; 24
     294:	e6 e0       	ldi	r30, 0x06	; 6
     296:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__epilogue_restores__+0x18>

0000029a <__floatunsisf>:
     29a:	a8 e0       	ldi	r26, 0x08	; 8
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e3 e5       	ldi	r30, 0x53	; 83
     2a0:	f1 e0       	ldi	r31, 0x01	; 1
     2a2:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__prologue_saves__+0x10>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	61 15       	cp	r22, r1
     2ac:	71 05       	cpc	r23, r1
     2ae:	81 05       	cpc	r24, r1
     2b0:	91 05       	cpc	r25, r1
     2b2:	19 f4       	brne	.+6      	; 0x2ba <__floatunsisf+0x20>
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	60 c0       	rjmp	.+192    	; 0x37a <__floatunsisf+0xe0>
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	8e e1       	ldi	r24, 0x1E	; 30
     2c0:	c8 2e       	mov	r12, r24
     2c2:	d1 2c       	mov	r13, r1
     2c4:	dc 82       	std	Y+4, r13	; 0x04
     2c6:	cb 82       	std	Y+3, r12	; 0x03
     2c8:	ed 82       	std	Y+5, r14	; 0x05
     2ca:	fe 82       	std	Y+6, r15	; 0x06
     2cc:	0f 83       	std	Y+7, r16	; 0x07
     2ce:	18 87       	std	Y+8, r17	; 0x08
     2d0:	c8 01       	movw	r24, r16
     2d2:	b7 01       	movw	r22, r14
     2d4:	0e 94 c6 01 	call	0x38c	; 0x38c <__clzsi2>
     2d8:	fc 01       	movw	r30, r24
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	f7 ff       	sbrs	r31, 7
     2de:	3b c0       	rjmp	.+118    	; 0x356 <__floatunsisf+0xbc>
     2e0:	22 27       	eor	r18, r18
     2e2:	33 27       	eor	r19, r19
     2e4:	2e 1b       	sub	r18, r30
     2e6:	3f 0b       	sbc	r19, r31
     2e8:	57 01       	movw	r10, r14
     2ea:	68 01       	movw	r12, r16
     2ec:	02 2e       	mov	r0, r18
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__floatunsisf+0x5e>
     2f0:	d6 94       	lsr	r13
     2f2:	c7 94       	ror	r12
     2f4:	b7 94       	ror	r11
     2f6:	a7 94       	ror	r10
     2f8:	0a 94       	dec	r0
     2fa:	d2 f7       	brpl	.-12     	; 0x2f0 <__floatunsisf+0x56>
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	a0 e0       	ldi	r26, 0x00	; 0
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__floatunsisf+0x7c>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	aa 1f       	adc	r26, r26
     314:	bb 1f       	adc	r27, r27
     316:	2a 95       	dec	r18
     318:	d2 f7       	brpl	.-12     	; 0x30e <__floatunsisf+0x74>
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	a1 09       	sbc	r26, r1
     31e:	b1 09       	sbc	r27, r1
     320:	8e 21       	and	r24, r14
     322:	9f 21       	and	r25, r15
     324:	a0 23       	and	r26, r16
     326:	b1 23       	and	r27, r17
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	a1 05       	cpc	r26, r1
     32c:	b1 05       	cpc	r27, r1
     32e:	21 f0       	breq	.+8      	; 0x338 <__floatunsisf+0x9e>
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	4a 29       	or	r20, r10
     33a:	5b 29       	or	r21, r11
     33c:	6c 29       	or	r22, r12
     33e:	7d 29       	or	r23, r13
     340:	4d 83       	std	Y+5, r20	; 0x05
     342:	5e 83       	std	Y+6, r21	; 0x06
     344:	6f 83       	std	Y+7, r22	; 0x07
     346:	78 87       	std	Y+8, r23	; 0x08
     348:	8e e1       	ldi	r24, 0x1E	; 30
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	8e 1b       	sub	r24, r30
     34e:	9f 0b       	sbc	r25, r31
     350:	9c 83       	std	Y+4, r25	; 0x04
     352:	8b 83       	std	Y+3, r24	; 0x03
     354:	12 c0       	rjmp	.+36     	; 0x37a <__floatunsisf+0xe0>
     356:	30 97       	sbiw	r30, 0x00	; 0
     358:	81 f0       	breq	.+32     	; 0x37a <__floatunsisf+0xe0>
     35a:	0e 2e       	mov	r0, r30
     35c:	04 c0       	rjmp	.+8      	; 0x366 <__floatunsisf+0xcc>
     35e:	ee 0c       	add	r14, r14
     360:	ff 1c       	adc	r15, r15
     362:	00 1f       	adc	r16, r16
     364:	11 1f       	adc	r17, r17
     366:	0a 94       	dec	r0
     368:	d2 f7       	brpl	.-12     	; 0x35e <__floatunsisf+0xc4>
     36a:	ed 82       	std	Y+5, r14	; 0x05
     36c:	fe 82       	std	Y+6, r15	; 0x06
     36e:	0f 83       	std	Y+7, r16	; 0x07
     370:	18 87       	std	Y+8, r17	; 0x08
     372:	ce 1a       	sub	r12, r30
     374:	df 0a       	sbc	r13, r31
     376:	dc 82       	std	Y+4, r13	; 0x04
     378:	cb 82       	std	Y+3, r12	; 0x03
     37a:	1a 82       	std	Y+2, r1	; 0x02
     37c:	ce 01       	movw	r24, r28
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	0e 94 15 02 	call	0x42a	; 0x42a <__pack_f>
     384:	28 96       	adiw	r28, 0x08	; 8
     386:	ea e0       	ldi	r30, 0x0A	; 10
     388:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__epilogue_restores__+0x10>

0000038c <__clzsi2>:
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	7b 01       	movw	r14, r22
     396:	8c 01       	movw	r16, r24
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	e8 16       	cp	r14, r24
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	f8 06       	cpc	r15, r24
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	08 07       	cpc	r16, r24
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	18 07       	cpc	r17, r24
     3a8:	88 f4       	brcc	.+34     	; 0x3cc <__clzsi2+0x40>
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	e8 16       	cp	r14, r24
     3ae:	f1 04       	cpc	r15, r1
     3b0:	01 05       	cpc	r16, r1
     3b2:	11 05       	cpc	r17, r1
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <__clzsi2+0x36>
     3b6:	28 f0       	brcs	.+10     	; 0x3c2 <__clzsi2+0x36>
     3b8:	88 e0       	ldi	r24, 0x08	; 8
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <__clzsi2+0x64>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	12 c0       	rjmp	.+36     	; 0x3f0 <__clzsi2+0x64>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	e8 16       	cp	r14, r24
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	f8 06       	cpc	r15, r24
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	08 07       	cpc	r16, r24
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	18 07       	cpc	r17, r24
     3dc:	28 f0       	brcs	.+10     	; 0x3e8 <__clzsi2+0x5c>
     3de:	88 e1       	ldi	r24, 0x18	; 24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <__clzsi2+0x64>
     3e8:	80 e1       	ldi	r24, 0x10	; 16
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	a0 e0       	ldi	r26, 0x00	; 0
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	20 e2       	ldi	r18, 0x20	; 32
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	28 1b       	sub	r18, r24
     3fa:	39 0b       	sbc	r19, r25
     3fc:	4a 0b       	sbc	r20, r26
     3fe:	5b 0b       	sbc	r21, r27
     400:	04 c0       	rjmp	.+8      	; 0x40a <__clzsi2+0x7e>
     402:	16 95       	lsr	r17
     404:	07 95       	ror	r16
     406:	f7 94       	ror	r15
     408:	e7 94       	ror	r14
     40a:	8a 95       	dec	r24
     40c:	d2 f7       	brpl	.-12     	; 0x402 <__clzsi2+0x76>
     40e:	f7 01       	movw	r30, r14
     410:	e8 59       	subi	r30, 0x98	; 152
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	80 81       	ld	r24, Z
     416:	28 1b       	sub	r18, r24
     418:	31 09       	sbc	r19, r1
     41a:	41 09       	sbc	r20, r1
     41c:	51 09       	sbc	r21, r1
     41e:	c9 01       	movw	r24, r18
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	08 95       	ret

0000042a <__pack_f>:
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	fc 01       	movw	r30, r24
     436:	e4 80       	ldd	r14, Z+4	; 0x04
     438:	f5 80       	ldd	r15, Z+5	; 0x05
     43a:	06 81       	ldd	r16, Z+6	; 0x06
     43c:	17 81       	ldd	r17, Z+7	; 0x07
     43e:	d1 80       	ldd	r13, Z+1	; 0x01
     440:	80 81       	ld	r24, Z
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	48 f4       	brcc	.+18     	; 0x458 <__pack_f+0x2e>
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	a0 e1       	ldi	r26, 0x10	; 16
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	e8 2a       	or	r14, r24
     450:	f9 2a       	or	r15, r25
     452:	0a 2b       	or	r16, r26
     454:	1b 2b       	or	r17, r27
     456:	a5 c0       	rjmp	.+330    	; 0x5a2 <__pack_f+0x178>
     458:	84 30       	cpi	r24, 0x04	; 4
     45a:	09 f4       	brne	.+2      	; 0x45e <__pack_f+0x34>
     45c:	9f c0       	rjmp	.+318    	; 0x59c <__pack_f+0x172>
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	21 f4       	brne	.+8      	; 0x46a <__pack_f+0x40>
     462:	ee 24       	eor	r14, r14
     464:	ff 24       	eor	r15, r15
     466:	87 01       	movw	r16, r14
     468:	05 c0       	rjmp	.+10     	; 0x474 <__pack_f+0x4a>
     46a:	e1 14       	cp	r14, r1
     46c:	f1 04       	cpc	r15, r1
     46e:	01 05       	cpc	r16, r1
     470:	11 05       	cpc	r17, r1
     472:	19 f4       	brne	.+6      	; 0x47a <__pack_f+0x50>
     474:	e0 e0       	ldi	r30, 0x00	; 0
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	96 c0       	rjmp	.+300    	; 0x5a6 <__pack_f+0x17c>
     47a:	62 81       	ldd	r22, Z+2	; 0x02
     47c:	73 81       	ldd	r23, Z+3	; 0x03
     47e:	9f ef       	ldi	r25, 0xFF	; 255
     480:	62 38       	cpi	r22, 0x82	; 130
     482:	79 07       	cpc	r23, r25
     484:	0c f0       	brlt	.+2      	; 0x488 <__pack_f+0x5e>
     486:	5b c0       	rjmp	.+182    	; 0x53e <__pack_f+0x114>
     488:	22 e8       	ldi	r18, 0x82	; 130
     48a:	3f ef       	ldi	r19, 0xFF	; 255
     48c:	26 1b       	sub	r18, r22
     48e:	37 0b       	sbc	r19, r23
     490:	2a 31       	cpi	r18, 0x1A	; 26
     492:	31 05       	cpc	r19, r1
     494:	2c f0       	brlt	.+10     	; 0x4a0 <__pack_f+0x76>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	2a c0       	rjmp	.+84     	; 0x4f4 <__pack_f+0xca>
     4a0:	b8 01       	movw	r22, r16
     4a2:	a7 01       	movw	r20, r14
     4a4:	02 2e       	mov	r0, r18
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__pack_f+0x86>
     4a8:	76 95       	lsr	r23
     4aa:	67 95       	ror	r22
     4ac:	57 95       	ror	r21
     4ae:	47 95       	ror	r20
     4b0:	0a 94       	dec	r0
     4b2:	d2 f7       	brpl	.-12     	; 0x4a8 <__pack_f+0x7e>
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__pack_f+0x9c>
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	aa 1f       	adc	r26, r26
     4c4:	bb 1f       	adc	r27, r27
     4c6:	2a 95       	dec	r18
     4c8:	d2 f7       	brpl	.-12     	; 0x4be <__pack_f+0x94>
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	a1 09       	sbc	r26, r1
     4ce:	b1 09       	sbc	r27, r1
     4d0:	8e 21       	and	r24, r14
     4d2:	9f 21       	and	r25, r15
     4d4:	a0 23       	and	r26, r16
     4d6:	b1 23       	and	r27, r17
     4d8:	00 97       	sbiw	r24, 0x00	; 0
     4da:	a1 05       	cpc	r26, r1
     4dc:	b1 05       	cpc	r27, r1
     4de:	21 f0       	breq	.+8      	; 0x4e8 <__pack_f+0xbe>
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	a0 e0       	ldi	r26, 0x00	; 0
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	9a 01       	movw	r18, r20
     4ea:	ab 01       	movw	r20, r22
     4ec:	28 2b       	or	r18, r24
     4ee:	39 2b       	or	r19, r25
     4f0:	4a 2b       	or	r20, r26
     4f2:	5b 2b       	or	r21, r27
     4f4:	da 01       	movw	r26, r20
     4f6:	c9 01       	movw	r24, r18
     4f8:	8f 77       	andi	r24, 0x7F	; 127
     4fa:	90 70       	andi	r25, 0x00	; 0
     4fc:	a0 70       	andi	r26, 0x00	; 0
     4fe:	b0 70       	andi	r27, 0x00	; 0
     500:	80 34       	cpi	r24, 0x40	; 64
     502:	91 05       	cpc	r25, r1
     504:	a1 05       	cpc	r26, r1
     506:	b1 05       	cpc	r27, r1
     508:	39 f4       	brne	.+14     	; 0x518 <__pack_f+0xee>
     50a:	27 ff       	sbrs	r18, 7
     50c:	09 c0       	rjmp	.+18     	; 0x520 <__pack_f+0xf6>
     50e:	20 5c       	subi	r18, 0xC0	; 192
     510:	3f 4f       	sbci	r19, 0xFF	; 255
     512:	4f 4f       	sbci	r20, 0xFF	; 255
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	04 c0       	rjmp	.+8      	; 0x520 <__pack_f+0xf6>
     518:	21 5c       	subi	r18, 0xC1	; 193
     51a:	3f 4f       	sbci	r19, 0xFF	; 255
     51c:	4f 4f       	sbci	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	e0 e0       	ldi	r30, 0x00	; 0
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	20 30       	cpi	r18, 0x00	; 0
     526:	a0 e0       	ldi	r26, 0x00	; 0
     528:	3a 07       	cpc	r19, r26
     52a:	a0 e0       	ldi	r26, 0x00	; 0
     52c:	4a 07       	cpc	r20, r26
     52e:	a0 e4       	ldi	r26, 0x40	; 64
     530:	5a 07       	cpc	r21, r26
     532:	10 f0       	brcs	.+4      	; 0x538 <__pack_f+0x10e>
     534:	e1 e0       	ldi	r30, 0x01	; 1
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	79 01       	movw	r14, r18
     53a:	8a 01       	movw	r16, r20
     53c:	27 c0       	rjmp	.+78     	; 0x58c <__pack_f+0x162>
     53e:	60 38       	cpi	r22, 0x80	; 128
     540:	71 05       	cpc	r23, r1
     542:	64 f5       	brge	.+88     	; 0x59c <__pack_f+0x172>
     544:	fb 01       	movw	r30, r22
     546:	e1 58       	subi	r30, 0x81	; 129
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	d8 01       	movw	r26, r16
     54c:	c7 01       	movw	r24, r14
     54e:	8f 77       	andi	r24, 0x7F	; 127
     550:	90 70       	andi	r25, 0x00	; 0
     552:	a0 70       	andi	r26, 0x00	; 0
     554:	b0 70       	andi	r27, 0x00	; 0
     556:	80 34       	cpi	r24, 0x40	; 64
     558:	91 05       	cpc	r25, r1
     55a:	a1 05       	cpc	r26, r1
     55c:	b1 05       	cpc	r27, r1
     55e:	39 f4       	brne	.+14     	; 0x56e <__pack_f+0x144>
     560:	e7 fe       	sbrs	r14, 7
     562:	0d c0       	rjmp	.+26     	; 0x57e <__pack_f+0x154>
     564:	80 e4       	ldi	r24, 0x40	; 64
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	a0 e0       	ldi	r26, 0x00	; 0
     56a:	b0 e0       	ldi	r27, 0x00	; 0
     56c:	04 c0       	rjmp	.+8      	; 0x576 <__pack_f+0x14c>
     56e:	8f e3       	ldi	r24, 0x3F	; 63
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b0 e0       	ldi	r27, 0x00	; 0
     576:	e8 0e       	add	r14, r24
     578:	f9 1e       	adc	r15, r25
     57a:	0a 1f       	adc	r16, r26
     57c:	1b 1f       	adc	r17, r27
     57e:	17 ff       	sbrs	r17, 7
     580:	05 c0       	rjmp	.+10     	; 0x58c <__pack_f+0x162>
     582:	16 95       	lsr	r17
     584:	07 95       	ror	r16
     586:	f7 94       	ror	r15
     588:	e7 94       	ror	r14
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	87 e0       	ldi	r24, 0x07	; 7
     58e:	16 95       	lsr	r17
     590:	07 95       	ror	r16
     592:	f7 94       	ror	r15
     594:	e7 94       	ror	r14
     596:	8a 95       	dec	r24
     598:	d1 f7       	brne	.-12     	; 0x58e <__pack_f+0x164>
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <__pack_f+0x17c>
     59c:	ee 24       	eor	r14, r14
     59e:	ff 24       	eor	r15, r15
     5a0:	87 01       	movw	r16, r14
     5a2:	ef ef       	ldi	r30, 0xFF	; 255
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	6e 2f       	mov	r22, r30
     5a8:	67 95       	ror	r22
     5aa:	66 27       	eor	r22, r22
     5ac:	67 95       	ror	r22
     5ae:	90 2f       	mov	r25, r16
     5b0:	9f 77       	andi	r25, 0x7F	; 127
     5b2:	d7 94       	ror	r13
     5b4:	dd 24       	eor	r13, r13
     5b6:	d7 94       	ror	r13
     5b8:	8e 2f       	mov	r24, r30
     5ba:	86 95       	lsr	r24
     5bc:	49 2f       	mov	r20, r25
     5be:	46 2b       	or	r20, r22
     5c0:	58 2f       	mov	r21, r24
     5c2:	5d 29       	or	r21, r13
     5c4:	b7 01       	movw	r22, r14
     5c6:	ca 01       	movw	r24, r20
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	ef 90       	pop	r14
     5d0:	df 90       	pop	r13
     5d2:	08 95       	ret

000005d4 <__unpack_f>:
     5d4:	fc 01       	movw	r30, r24
     5d6:	db 01       	movw	r26, r22
     5d8:	40 81       	ld	r20, Z
     5da:	51 81       	ldd	r21, Z+1	; 0x01
     5dc:	22 81       	ldd	r18, Z+2	; 0x02
     5de:	62 2f       	mov	r22, r18
     5e0:	6f 77       	andi	r22, 0x7F	; 127
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	22 1f       	adc	r18, r18
     5e6:	22 27       	eor	r18, r18
     5e8:	22 1f       	adc	r18, r18
     5ea:	93 81       	ldd	r25, Z+3	; 0x03
     5ec:	89 2f       	mov	r24, r25
     5ee:	88 0f       	add	r24, r24
     5f0:	82 2b       	or	r24, r18
     5f2:	28 2f       	mov	r18, r24
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	99 1f       	adc	r25, r25
     5f8:	99 27       	eor	r25, r25
     5fa:	99 1f       	adc	r25, r25
     5fc:	11 96       	adiw	r26, 0x01	; 1
     5fe:	9c 93       	st	X, r25
     600:	11 97       	sbiw	r26, 0x01	; 1
     602:	21 15       	cp	r18, r1
     604:	31 05       	cpc	r19, r1
     606:	a9 f5       	brne	.+106    	; 0x672 <__unpack_f+0x9e>
     608:	41 15       	cp	r20, r1
     60a:	51 05       	cpc	r21, r1
     60c:	61 05       	cpc	r22, r1
     60e:	71 05       	cpc	r23, r1
     610:	11 f4       	brne	.+4      	; 0x616 <__unpack_f+0x42>
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	37 c0       	rjmp	.+110    	; 0x684 <__unpack_f+0xb0>
     616:	82 e8       	ldi	r24, 0x82	; 130
     618:	9f ef       	ldi	r25, 0xFF	; 255
     61a:	13 96       	adiw	r26, 0x03	; 3
     61c:	9c 93       	st	X, r25
     61e:	8e 93       	st	-X, r24
     620:	12 97       	sbiw	r26, 0x02	; 2
     622:	9a 01       	movw	r18, r20
     624:	ab 01       	movw	r20, r22
     626:	67 e0       	ldi	r22, 0x07	; 7
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	44 1f       	adc	r20, r20
     62e:	55 1f       	adc	r21, r21
     630:	6a 95       	dec	r22
     632:	d1 f7       	brne	.-12     	; 0x628 <__unpack_f+0x54>
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	8c 93       	st	X, r24
     638:	0d c0       	rjmp	.+26     	; 0x654 <__unpack_f+0x80>
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	44 1f       	adc	r20, r20
     640:	55 1f       	adc	r21, r21
     642:	12 96       	adiw	r26, 0x02	; 2
     644:	8d 91       	ld	r24, X+
     646:	9c 91       	ld	r25, X
     648:	13 97       	sbiw	r26, 0x03	; 3
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	13 96       	adiw	r26, 0x03	; 3
     64e:	9c 93       	st	X, r25
     650:	8e 93       	st	-X, r24
     652:	12 97       	sbiw	r26, 0x02	; 2
     654:	20 30       	cpi	r18, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	38 07       	cpc	r19, r24
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	48 07       	cpc	r20, r24
     65e:	80 e4       	ldi	r24, 0x40	; 64
     660:	58 07       	cpc	r21, r24
     662:	58 f3       	brcs	.-42     	; 0x63a <__unpack_f+0x66>
     664:	14 96       	adiw	r26, 0x04	; 4
     666:	2d 93       	st	X+, r18
     668:	3d 93       	st	X+, r19
     66a:	4d 93       	st	X+, r20
     66c:	5c 93       	st	X, r21
     66e:	17 97       	sbiw	r26, 0x07	; 7
     670:	08 95       	ret
     672:	2f 3f       	cpi	r18, 0xFF	; 255
     674:	31 05       	cpc	r19, r1
     676:	79 f4       	brne	.+30     	; 0x696 <__unpack_f+0xc2>
     678:	41 15       	cp	r20, r1
     67a:	51 05       	cpc	r21, r1
     67c:	61 05       	cpc	r22, r1
     67e:	71 05       	cpc	r23, r1
     680:	19 f4       	brne	.+6      	; 0x688 <__unpack_f+0xb4>
     682:	84 e0       	ldi	r24, 0x04	; 4
     684:	8c 93       	st	X, r24
     686:	08 95       	ret
     688:	64 ff       	sbrs	r22, 4
     68a:	03 c0       	rjmp	.+6      	; 0x692 <__unpack_f+0xbe>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	8c 93       	st	X, r24
     690:	12 c0       	rjmp	.+36     	; 0x6b6 <__unpack_f+0xe2>
     692:	1c 92       	st	X, r1
     694:	10 c0       	rjmp	.+32     	; 0x6b6 <__unpack_f+0xe2>
     696:	2f 57       	subi	r18, 0x7F	; 127
     698:	30 40       	sbci	r19, 0x00	; 0
     69a:	13 96       	adiw	r26, 0x03	; 3
     69c:	3c 93       	st	X, r19
     69e:	2e 93       	st	-X, r18
     6a0:	12 97       	sbiw	r26, 0x02	; 2
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	8c 93       	st	X, r24
     6a6:	87 e0       	ldi	r24, 0x07	; 7
     6a8:	44 0f       	add	r20, r20
     6aa:	55 1f       	adc	r21, r21
     6ac:	66 1f       	adc	r22, r22
     6ae:	77 1f       	adc	r23, r23
     6b0:	8a 95       	dec	r24
     6b2:	d1 f7       	brne	.-12     	; 0x6a8 <__unpack_f+0xd4>
     6b4:	70 64       	ori	r23, 0x40	; 64
     6b6:	14 96       	adiw	r26, 0x04	; 4
     6b8:	4d 93       	st	X+, r20
     6ba:	5d 93       	st	X+, r21
     6bc:	6d 93       	st	X+, r22
     6be:	7c 93       	st	X, r23
     6c0:	17 97       	sbiw	r26, 0x07	; 7
     6c2:	08 95       	ret

000006c4 <__fpcmp_parts_f>:
     6c4:	1f 93       	push	r17
     6c6:	dc 01       	movw	r26, r24
     6c8:	fb 01       	movw	r30, r22
     6ca:	9c 91       	ld	r25, X
     6cc:	92 30       	cpi	r25, 0x02	; 2
     6ce:	08 f4       	brcc	.+2      	; 0x6d2 <__fpcmp_parts_f+0xe>
     6d0:	47 c0       	rjmp	.+142    	; 0x760 <__fpcmp_parts_f+0x9c>
     6d2:	80 81       	ld	r24, Z
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	08 f4       	brcc	.+2      	; 0x6da <__fpcmp_parts_f+0x16>
     6d8:	43 c0       	rjmp	.+134    	; 0x760 <__fpcmp_parts_f+0x9c>
     6da:	94 30       	cpi	r25, 0x04	; 4
     6dc:	51 f4       	brne	.+20     	; 0x6f2 <__fpcmp_parts_f+0x2e>
     6de:	11 96       	adiw	r26, 0x01	; 1
     6e0:	1c 91       	ld	r17, X
     6e2:	84 30       	cpi	r24, 0x04	; 4
     6e4:	99 f5       	brne	.+102    	; 0x74c <__fpcmp_parts_f+0x88>
     6e6:	81 81       	ldd	r24, Z+1	; 0x01
     6e8:	68 2f       	mov	r22, r24
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	61 1b       	sub	r22, r17
     6ee:	71 09       	sbc	r23, r1
     6f0:	3f c0       	rjmp	.+126    	; 0x770 <__fpcmp_parts_f+0xac>
     6f2:	84 30       	cpi	r24, 0x04	; 4
     6f4:	21 f0       	breq	.+8      	; 0x6fe <__fpcmp_parts_f+0x3a>
     6f6:	92 30       	cpi	r25, 0x02	; 2
     6f8:	31 f4       	brne	.+12     	; 0x706 <__fpcmp_parts_f+0x42>
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	b9 f1       	breq	.+110    	; 0x76c <__fpcmp_parts_f+0xa8>
     6fe:	81 81       	ldd	r24, Z+1	; 0x01
     700:	88 23       	and	r24, r24
     702:	89 f1       	breq	.+98     	; 0x766 <__fpcmp_parts_f+0xa2>
     704:	2d c0       	rjmp	.+90     	; 0x760 <__fpcmp_parts_f+0x9c>
     706:	11 96       	adiw	r26, 0x01	; 1
     708:	1c 91       	ld	r17, X
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	f1 f0       	breq	.+60     	; 0x74c <__fpcmp_parts_f+0x88>
     710:	81 81       	ldd	r24, Z+1	; 0x01
     712:	18 17       	cp	r17, r24
     714:	d9 f4       	brne	.+54     	; 0x74c <__fpcmp_parts_f+0x88>
     716:	12 96       	adiw	r26, 0x02	; 2
     718:	2d 91       	ld	r18, X+
     71a:	3c 91       	ld	r19, X
     71c:	13 97       	sbiw	r26, 0x03	; 3
     71e:	82 81       	ldd	r24, Z+2	; 0x02
     720:	93 81       	ldd	r25, Z+3	; 0x03
     722:	82 17       	cp	r24, r18
     724:	93 07       	cpc	r25, r19
     726:	94 f0       	brlt	.+36     	; 0x74c <__fpcmp_parts_f+0x88>
     728:	28 17       	cp	r18, r24
     72a:	39 07       	cpc	r19, r25
     72c:	bc f0       	brlt	.+46     	; 0x75c <__fpcmp_parts_f+0x98>
     72e:	14 96       	adiw	r26, 0x04	; 4
     730:	8d 91       	ld	r24, X+
     732:	9d 91       	ld	r25, X+
     734:	0d 90       	ld	r0, X+
     736:	bc 91       	ld	r27, X
     738:	a0 2d       	mov	r26, r0
     73a:	24 81       	ldd	r18, Z+4	; 0x04
     73c:	35 81       	ldd	r19, Z+5	; 0x05
     73e:	46 81       	ldd	r20, Z+6	; 0x06
     740:	57 81       	ldd	r21, Z+7	; 0x07
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	4a 07       	cpc	r20, r26
     748:	5b 07       	cpc	r21, r27
     74a:	18 f4       	brcc	.+6      	; 0x752 <__fpcmp_parts_f+0x8e>
     74c:	11 23       	and	r17, r17
     74e:	41 f0       	breq	.+16     	; 0x760 <__fpcmp_parts_f+0x9c>
     750:	0a c0       	rjmp	.+20     	; 0x766 <__fpcmp_parts_f+0xa2>
     752:	82 17       	cp	r24, r18
     754:	93 07       	cpc	r25, r19
     756:	a4 07       	cpc	r26, r20
     758:	b5 07       	cpc	r27, r21
     75a:	40 f4       	brcc	.+16     	; 0x76c <__fpcmp_parts_f+0xa8>
     75c:	11 23       	and	r17, r17
     75e:	19 f0       	breq	.+6      	; 0x766 <__fpcmp_parts_f+0xa2>
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	05 c0       	rjmp	.+10     	; 0x770 <__fpcmp_parts_f+0xac>
     766:	6f ef       	ldi	r22, 0xFF	; 255
     768:	7f ef       	ldi	r23, 0xFF	; 255
     76a:	02 c0       	rjmp	.+4      	; 0x770 <__fpcmp_parts_f+0xac>
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	cb 01       	movw	r24, r22
     772:	1f 91       	pop	r17
     774:	08 95       	ret

00000776 <ADC_Int>:
#include "utils.h"
#include "DIO.h"
#include "memmap.h"
#include"ADC.h"

 void ADC_Int(void){
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(ADCMUX,Pin6); // adjust data left
     77e:	a7 e2       	ldi	r26, 0x27	; 39
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e7 e2       	ldi	r30, 0x27	; 39
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	80 64       	ori	r24, 0x40	; 64
     78a:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,Pin7); // enable ADC
     78c:	a6 e2       	ldi	r26, 0x26	; 38
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	e6 e2       	ldi	r30, 0x26	; 38
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	80 68       	ori	r24, 0x80	; 128
     798:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,Pin2); // determine the prescalar divide factor...
     79a:	a6 e2       	ldi	r26, 0x26	; 38
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e6 e2       	ldi	r30, 0x26	; 38
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	84 60       	ori	r24, 0x04	; 4
     7a6:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,Pin1);
     7a8:	a6 e2       	ldi	r26, 0x26	; 38
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	e6 e2       	ldi	r30, 0x26	; 38
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	8c 93       	st	X, r24
	 CLR_BIT(ADCSRA,Pin0);
     7b6:	a6 e2       	ldi	r26, 0x26	; 38
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e6 e2       	ldi	r30, 0x26	; 38
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	8e 7f       	andi	r24, 0xFE	; 254
     7c2:	8c 93       	st	X, r24
	 // after the prescalar determine the Reference selection..
 }
     7c4:	cf 91       	pop	r28
     7c6:	df 91       	pop	r29
     7c8:	08 95       	ret

000007ca <ADC_StartSingleConversion>:

 void ADC_StartSingleConversion(ADC_CHANNEL_T pin ){
     7ca:	df 93       	push	r29
     7cc:	cf 93       	push	r28
     7ce:	0f 92       	push	r0
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	89 83       	std	Y+1, r24	; 0x01

	// MOD_REG(ADCMUX,pin); //
	  ADCMUX |= pin;  // determine the channel
     7d6:	a7 e2       	ldi	r26, 0x27	; 39
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	e7 e2       	ldi	r30, 0x27	; 39
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	90 81       	ld	r25, Z
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	89 2b       	or	r24, r25
     7e4:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,Pin6); // start conversion
     7e6:	a6 e2       	ldi	r26, 0x26	; 38
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	e6 e2       	ldi	r30, 0x26	; 38
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	80 64       	ori	r24, 0x40	; 64
     7f2:	8c 93       	st	X, r24

	/*  while the conversion is not processed halt the processor
	 (read the flag bit if = 0  conversion not finished)
       if = 1  conversion finished */
 	 while(GET_BIT(ADCSRA,Pin4) == 0);
     7f4:	e6 e2       	ldi	r30, 0x26	; 38
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	80 71       	andi	r24, 0x10	; 16
     800:	90 70       	andi	r25, 0x00	; 0
     802:	95 95       	asr	r25
     804:	87 95       	ror	r24
     806:	95 95       	asr	r25
     808:	87 95       	ror	r24
     80a:	95 95       	asr	r25
     80c:	87 95       	ror	r24
     80e:	95 95       	asr	r25
     810:	87 95       	ror	r24
     812:	00 97       	sbiw	r24, 0x00	; 0
     814:	79 f3       	breq	.-34     	; 0x7f4 <ADC_StartSingleConversion+0x2a>
	 /* if conversion is processed set the flag to be cleared by AND gate.. cleared mean that there is no conversion
	  * in this function the ADC will make one conversion and flag bit will cleared ..
	  * (put function in while(1) to make ADC convert more than one time) */
	 SET_BIT(ADCSRA,Pin4);
     816:	a6 e2       	ldi	r26, 0x26	; 38
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e6 e2       	ldi	r30, 0x26	; 38
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	80 61       	ori	r24, 0x10	; 16
     822:	8c 93       	st	X, r24

 }
     824:	0f 90       	pop	r0
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <ADC_AutoTriggerConversion>:
  void ADC_AutoTriggerConversion(ADC_CHANNEL_T pin){
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	0f 92       	push	r0
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	89 83       	std	Y+1, r24	; 0x01
	  ADCMUX |= pin;
     838:	a7 e2       	ldi	r26, 0x27	; 39
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	e7 e2       	ldi	r30, 0x27	; 39
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	90 81       	ld	r25, Z
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	89 2b       	or	r24, r25
     846:	8c 93       	st	X, r24
	  	 SET_BIT(ADCSRA,Pin6);
     848:	a6 e2       	ldi	r26, 0x26	; 38
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	e6 e2       	ldi	r30, 0x26	; 38
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	80 64       	ori	r24, 0x40	; 64
     854:	8c 93       	st	X, r24
	  	 SET_BIT(ADCSRA,Pin5);
     856:	a6 e2       	ldi	r26, 0x26	; 38
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	e6 e2       	ldi	r30, 0x26	; 38
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	80 62       	ori	r24, 0x20	; 32
     862:	8c 93       	st	X, r24
	  	 CLR_BIT(SFIOR,Pin7);
     864:	a0 e5       	ldi	r26, 0x50	; 80
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	e0 e5       	ldi	r30, 0x50	; 80
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	8f 77       	andi	r24, 0x7F	; 127
     870:	8c 93       	st	X, r24
	  	 CLR_BIT(SFIOR,Pin6);
     872:	a0 e5       	ldi	r26, 0x50	; 80
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	e0 e5       	ldi	r30, 0x50	; 80
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	8f 7b       	andi	r24, 0xBF	; 191
     87e:	8c 93       	st	X, r24
	  	 CLR_BIT(SFIOR,Pin5);
     880:	a0 e5       	ldi	r26, 0x50	; 80
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	e0 e5       	ldi	r30, 0x50	; 80
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	8f 7d       	andi	r24, 0xDF	; 223
     88c:	8c 93       	st	X, r24

	  	/*  while the conversion is not processed halt the processor
	  	 (read the flag bit if = 0  conversion not finished)
	         if = 1  conversion finished */
	   	 while(GET_BIT(ADCSRA,Pin4) == 0);
     88e:	e6 e2       	ldi	r30, 0x26	; 38
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	80 71       	andi	r24, 0x10	; 16
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	95 95       	asr	r25
     89e:	87 95       	ror	r24
     8a0:	95 95       	asr	r25
     8a2:	87 95       	ror	r24
     8a4:	95 95       	asr	r25
     8a6:	87 95       	ror	r24
     8a8:	95 95       	asr	r25
     8aa:	87 95       	ror	r24
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	79 f3       	breq	.-34     	; 0x88e <__stack+0x2f>
	  	 /* if conversion is processed set the flag to be cleared by AND gate.. cleared mean that there is no conversion
	  	  *  to allow ADC to make a new conversion.. in this function ADC make new conversion auto if flag bit is cleared ..
	  	  *  */
	  	 SET_BIT(ADCSRA,Pin4);
     8b0:	a6 e2       	ldi	r26, 0x26	; 38
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	e6 e2       	ldi	r30, 0x26	; 38
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	80 61       	ori	r24, 0x10	; 16
     8bc:	8c 93       	st	X, r24

 }
     8be:	0f 90       	pop	r0
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	08 95       	ret

000008c6 <ADC_GETVALUE>:

  uint16 ADC_GETVALUE(void){
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <ADC_GETVALUE+0x6>
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62

	  uint16 value = ADCL | (ADCH <<8);
     8d0:	e4 e2       	ldi	r30, 0x24	; 36
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	28 2f       	mov	r18, r24
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	e5 e2       	ldi	r30, 0x25	; 37
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	88 2f       	mov	r24, r24
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	98 2f       	mov	r25, r24
     8e6:	88 27       	eor	r24, r24
     8e8:	82 2b       	or	r24, r18
     8ea:	93 2b       	or	r25, r19
     8ec:	9a 83       	std	Y+2, r25	; 0x02
     8ee:	89 83       	std	Y+1, r24	; 0x01
	  return value;
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02

	  // right =  6 , 2
  }
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	cf 91       	pop	r28
     8fa:	df 91       	pop	r29
     8fc:	08 95       	ret

000008fe <DIO_SetPinDirection>:
#include"utils.h"
#include"memmap.h"
#include"DIO.h"

// Function set pin.
DIOStatus_t DIO_SetPinDirection(DIOPortID_t port,DIOPinID_t pin,DIODIRECTION_t dir){
     8fe:	df 93       	push	r29
     900:	cf 93       	push	r28
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	2e 97       	sbiw	r28, 0x0e	; 14
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	89 83       	std	Y+1, r24	; 0x01
     914:	6a 83       	std	Y+2, r22	; 0x02
     916:	4b 83       	std	Y+3, r20	; 0x03
if (pin <= Pin7 && port <=PD ){
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	88 30       	cpi	r24, 0x08	; 8
     91c:	08 f0       	brcs	.+2      	; 0x920 <DIO_SetPinDirection+0x22>
     91e:	bb c1       	rjmp	.+886    	; 0xc96 <DIO_SetPinDirection+0x398>
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	08 f0       	brcs	.+2      	; 0x928 <DIO_SetPinDirection+0x2a>
     926:	b7 c1       	rjmp	.+878    	; 0xc96 <DIO_SetPinDirection+0x398>

	switch(port){
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	3e 87       	std	Y+14, r19	; 0x0e
     930:	2d 87       	std	Y+13, r18	; 0x0d
     932:	8d 85       	ldd	r24, Y+13	; 0x0d
     934:	9e 85       	ldd	r25, Y+14	; 0x0e
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	91 05       	cpc	r25, r1
     93a:	09 f4       	brne	.+2      	; 0x93e <DIO_SetPinDirection+0x40>
     93c:	7c c0       	rjmp	.+248    	; 0xa36 <DIO_SetPinDirection+0x138>
     93e:	2d 85       	ldd	r18, Y+13	; 0x0d
     940:	3e 85       	ldd	r19, Y+14	; 0x0e
     942:	22 30       	cpi	r18, 0x02	; 2
     944:	31 05       	cpc	r19, r1
     946:	2c f4       	brge	.+10     	; 0x952 <DIO_SetPinDirection+0x54>
     948:	8d 85       	ldd	r24, Y+13	; 0x0d
     94a:	9e 85       	ldd	r25, Y+14	; 0x0e
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	71 f0       	breq	.+28     	; 0x96c <DIO_SetPinDirection+0x6e>
     950:	a0 c1       	rjmp	.+832    	; 0xc92 <DIO_SetPinDirection+0x394>
     952:	2d 85       	ldd	r18, Y+13	; 0x0d
     954:	3e 85       	ldd	r19, Y+14	; 0x0e
     956:	22 30       	cpi	r18, 0x02	; 2
     958:	31 05       	cpc	r19, r1
     95a:	09 f4       	brne	.+2      	; 0x95e <DIO_SetPinDirection+0x60>
     95c:	d1 c0       	rjmp	.+418    	; 0xb00 <DIO_SetPinDirection+0x202>
     95e:	8d 85       	ldd	r24, Y+13	; 0x0d
     960:	9e 85       	ldd	r25, Y+14	; 0x0e
     962:	83 30       	cpi	r24, 0x03	; 3
     964:	91 05       	cpc	r25, r1
     966:	09 f4       	brne	.+2      	; 0x96a <DIO_SetPinDirection+0x6c>
     968:	30 c1       	rjmp	.+608    	; 0xbca <DIO_SetPinDirection+0x2cc>
     96a:	93 c1       	rjmp	.+806    	; 0xc92 <DIO_SetPinDirection+0x394>
	case PA:
		switch(dir){
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	3c 87       	std	Y+12, r19	; 0x0c
     974:	2b 87       	std	Y+11, r18	; 0x0b
     976:	8b 85       	ldd	r24, Y+11	; 0x0b
     978:	9c 85       	ldd	r25, Y+12	; 0x0c
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	91 05       	cpc	r25, r1
     97e:	09 f4       	brne	.+2      	; 0x982 <DIO_SetPinDirection+0x84>
     980:	45 c0       	rjmp	.+138    	; 0xa0c <DIO_SetPinDirection+0x10e>
     982:	2b 85       	ldd	r18, Y+11	; 0x0b
     984:	3c 85       	ldd	r19, Y+12	; 0x0c
     986:	22 30       	cpi	r18, 0x02	; 2
     988:	31 05       	cpc	r19, r1
     98a:	c9 f0       	breq	.+50     	; 0x9be <DIO_SetPinDirection+0xc0>
     98c:	8b 85       	ldd	r24, Y+11	; 0x0b
     98e:	9c 85       	ldd	r25, Y+12	; 0x0c
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	09 f0       	breq	.+2      	; 0x996 <DIO_SetPinDirection+0x98>
     994:	7e c1       	rjmp	.+764    	; 0xc92 <DIO_SetPinDirection+0x394>
		case OUT:
			SET_BIT(DDRA,pin);
     996:	aa e3       	ldi	r26, 0x3A	; 58
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	ea e3       	ldi	r30, 0x3A	; 58
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	48 2f       	mov	r20, r24
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 2e       	mov	r0, r18
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <DIO_SetPinDirection+0xb6>
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	0a 94       	dec	r0
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <DIO_SetPinDirection+0xb2>
     9b8:	84 2b       	or	r24, r20
     9ba:	8c 93       	st	X, r24
     9bc:	6a c1       	rjmp	.+724    	; 0xc92 <DIO_SetPinDirection+0x394>
			break;
		case INPULLUP:
			CLR_BIT(DDRA,pin);
     9be:	aa e3       	ldi	r26, 0x3A	; 58
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	ea e3       	ldi	r30, 0x3A	; 58
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	48 2f       	mov	r20, r24
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_SetPinDirection+0xdc>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	2a 95       	dec	r18
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_SetPinDirection+0xd8>
     9de:	80 95       	com	r24
     9e0:	84 23       	and	r24, r20
     9e2:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin);
     9e4:	ab e3       	ldi	r26, 0x3B	; 59
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	eb e3       	ldi	r30, 0x3B	; 59
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	48 2f       	mov	r20, r24
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	28 2f       	mov	r18, r24
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	02 2e       	mov	r0, r18
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_SetPinDirection+0x104>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	0a 94       	dec	r0
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_SetPinDirection+0x100>
     a06:	84 2b       	or	r24, r20
     a08:	8c 93       	st	X, r24
     a0a:	43 c1       	rjmp	.+646    	; 0xc92 <DIO_SetPinDirection+0x394>
			break;
		case INFREE:
			// code here .....
			CLR_BIT(DDRA,pin);
     a0c:	aa e3       	ldi	r26, 0x3A	; 58
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	ea e3       	ldi	r30, 0x3A	; 58
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	48 2f       	mov	r20, r24
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	28 2f       	mov	r18, r24
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	02 2e       	mov	r0, r18
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <DIO_SetPinDirection+0x12c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	0a 94       	dec	r0
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <DIO_SetPinDirection+0x128>
     a2e:	80 95       	com	r24
     a30:	84 23       	and	r24, r20
     a32:	8c 93       	st	X, r24
     a34:	2e c1       	rjmp	.+604    	; 0xc92 <DIO_SetPinDirection+0x394>
			break;

		}
       break;
	case PB:
		switch(dir){
     a36:	8b 81       	ldd	r24, Y+3	; 0x03
     a38:	28 2f       	mov	r18, r24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	3a 87       	std	Y+10, r19	; 0x0a
     a3e:	29 87       	std	Y+9, r18	; 0x09
     a40:	89 85       	ldd	r24, Y+9	; 0x09
     a42:	9a 85       	ldd	r25, Y+10	; 0x0a
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	91 05       	cpc	r25, r1
     a48:	09 f4       	brne	.+2      	; 0xa4c <DIO_SetPinDirection+0x14e>
     a4a:	45 c0       	rjmp	.+138    	; 0xad6 <DIO_SetPinDirection+0x1d8>
     a4c:	29 85       	ldd	r18, Y+9	; 0x09
     a4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a50:	22 30       	cpi	r18, 0x02	; 2
     a52:	31 05       	cpc	r19, r1
     a54:	c9 f0       	breq	.+50     	; 0xa88 <DIO_SetPinDirection+0x18a>
     a56:	89 85       	ldd	r24, Y+9	; 0x09
     a58:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	09 f0       	breq	.+2      	; 0xa60 <DIO_SetPinDirection+0x162>
     a5e:	19 c1       	rjmp	.+562    	; 0xc92 <DIO_SetPinDirection+0x394>
				case OUT:
					SET_BIT(DDRB,pin);
     a60:	a7 e3       	ldi	r26, 0x37	; 55
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e7 e3       	ldi	r30, 0x37	; 55
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	48 2f       	mov	r20, r24
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 2e       	mov	r0, r18
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_SetPinDirection+0x180>
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	0a 94       	dec	r0
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_SetPinDirection+0x17c>
     a82:	84 2b       	or	r24, r20
     a84:	8c 93       	st	X, r24
     a86:	05 c1       	rjmp	.+522    	; 0xc92 <DIO_SetPinDirection+0x394>
					break;
				case INPULLUP:
					CLR_BIT(DDRB,pin);
     a88:	a7 e3       	ldi	r26, 0x37	; 55
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e7 e3       	ldi	r30, 0x37	; 55
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	48 2f       	mov	r20, r24
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_SetPinDirection+0x1a6>
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	2a 95       	dec	r18
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_SetPinDirection+0x1a2>
     aa8:	80 95       	com	r24
     aaa:	84 23       	and	r24, r20
     aac:	8c 93       	st	X, r24
					SET_BIT(PORTB,pin);
     aae:	a8 e3       	ldi	r26, 0x38	; 56
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e8 e3       	ldi	r30, 0x38	; 56
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	48 2f       	mov	r20, r24
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	02 2e       	mov	r0, r18
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_SetPinDirection+0x1ce>
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	0a 94       	dec	r0
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_SetPinDirection+0x1ca>
     ad0:	84 2b       	or	r24, r20
     ad2:	8c 93       	st	X, r24
     ad4:	de c0       	rjmp	.+444    	; 0xc92 <DIO_SetPinDirection+0x394>
					break;
				case INFREE:
					// code here .....
					CLR_BIT(DDRB,pin);
     ad6:	a7 e3       	ldi	r26, 0x37	; 55
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	e7 e3       	ldi	r30, 0x37	; 55
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	48 2f       	mov	r20, r24
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	28 2f       	mov	r18, r24
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	02 2e       	mov	r0, r18
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_SetPinDirection+0x1f6>
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	0a 94       	dec	r0
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_SetPinDirection+0x1f2>
     af8:	80 95       	com	r24
     afa:	84 23       	and	r24, r20
     afc:	8c 93       	st	X, r24
     afe:	c9 c0       	rjmp	.+402    	; 0xc92 <DIO_SetPinDirection+0x394>

				}
		break;

	case PC:
		switch(dir){
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	38 87       	std	Y+8, r19	; 0x08
     b08:	2f 83       	std	Y+7, r18	; 0x07
     b0a:	8f 81       	ldd	r24, Y+7	; 0x07
     b0c:	98 85       	ldd	r25, Y+8	; 0x08
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	91 05       	cpc	r25, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <DIO_SetPinDirection+0x218>
     b14:	45 c0       	rjmp	.+138    	; 0xba0 <DIO_SetPinDirection+0x2a2>
     b16:	2f 81       	ldd	r18, Y+7	; 0x07
     b18:	38 85       	ldd	r19, Y+8	; 0x08
     b1a:	22 30       	cpi	r18, 0x02	; 2
     b1c:	31 05       	cpc	r19, r1
     b1e:	c9 f0       	breq	.+50     	; 0xb52 <DIO_SetPinDirection+0x254>
     b20:	8f 81       	ldd	r24, Y+7	; 0x07
     b22:	98 85       	ldd	r25, Y+8	; 0x08
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	09 f0       	breq	.+2      	; 0xb2a <DIO_SetPinDirection+0x22c>
     b28:	b4 c0       	rjmp	.+360    	; 0xc92 <DIO_SetPinDirection+0x394>
				case OUT:
					SET_BIT(DDRC,pin);
     b2a:	a4 e3       	ldi	r26, 0x34	; 52
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	e4 e3       	ldi	r30, 0x34	; 52
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	48 2f       	mov	r20, r24
     b36:	8a 81       	ldd	r24, Y+2	; 0x02
     b38:	28 2f       	mov	r18, r24
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	02 2e       	mov	r0, r18
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <DIO_SetPinDirection+0x24a>
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	0a 94       	dec	r0
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <DIO_SetPinDirection+0x246>
     b4c:	84 2b       	or	r24, r20
     b4e:	8c 93       	st	X, r24
     b50:	a0 c0       	rjmp	.+320    	; 0xc92 <DIO_SetPinDirection+0x394>
					break;
				case INPULLUP:
					CLR_BIT(DDRC,pin);
     b52:	a4 e3       	ldi	r26, 0x34	; 52
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e4 e3       	ldi	r30, 0x34	; 52
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	48 2f       	mov	r20, r24
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_SetPinDirection+0x270>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	2a 95       	dec	r18
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_SetPinDirection+0x26c>
     b72:	80 95       	com	r24
     b74:	84 23       	and	r24, r20
     b76:	8c 93       	st	X, r24
					SET_BIT(PORTC,pin);
     b78:	a5 e3       	ldi	r26, 0x35	; 53
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e5 e3       	ldi	r30, 0x35	; 53
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	48 2f       	mov	r20, r24
     b84:	8a 81       	ldd	r24, Y+2	; 0x02
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	02 2e       	mov	r0, r18
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <DIO_SetPinDirection+0x298>
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	0a 94       	dec	r0
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <DIO_SetPinDirection+0x294>
     b9a:	84 2b       	or	r24, r20
     b9c:	8c 93       	st	X, r24
     b9e:	79 c0       	rjmp	.+242    	; 0xc92 <DIO_SetPinDirection+0x394>
					break;
				case INFREE:
					// code here .....
					CLR_BIT(DDRC,pin);
     ba0:	a4 e3       	ldi	r26, 0x34	; 52
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e4 e3       	ldi	r30, 0x34	; 52
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	48 2f       	mov	r20, r24
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	02 2e       	mov	r0, r18
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <DIO_SetPinDirection+0x2c0>
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <DIO_SetPinDirection+0x2bc>
     bc2:	80 95       	com	r24
     bc4:	84 23       	and	r24, r20
     bc6:	8c 93       	st	X, r24
     bc8:	64 c0       	rjmp	.+200    	; 0xc92 <DIO_SetPinDirection+0x394>
					break;

				}
		break;
	case PD:
		switch(dir){
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	3e 83       	std	Y+6, r19	; 0x06
     bd2:	2d 83       	std	Y+5, r18	; 0x05
     bd4:	8d 81       	ldd	r24, Y+5	; 0x05
     bd6:	9e 81       	ldd	r25, Y+6	; 0x06
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <DIO_SetPinDirection+0x2e2>
     bde:	45 c0       	rjmp	.+138    	; 0xc6a <DIO_SetPinDirection+0x36c>
     be0:	2d 81       	ldd	r18, Y+5	; 0x05
     be2:	3e 81       	ldd	r19, Y+6	; 0x06
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	c9 f0       	breq	.+50     	; 0xc1c <DIO_SetPinDirection+0x31e>
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	9e 81       	ldd	r25, Y+6	; 0x06
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <DIO_SetPinDirection+0x2f6>
     bf2:	4f c0       	rjmp	.+158    	; 0xc92 <DIO_SetPinDirection+0x394>
				case OUT:
					SET_BIT(DDRD,pin);
     bf4:	a1 e3       	ldi	r26, 0x31	; 49
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e1 e3       	ldi	r30, 0x31	; 49
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 2e       	mov	r0, r18
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_SetPinDirection+0x314>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <DIO_SetPinDirection+0x310>
     c16:	84 2b       	or	r24, r20
     c18:	8c 93       	st	X, r24
     c1a:	3b c0       	rjmp	.+118    	; 0xc92 <DIO_SetPinDirection+0x394>
					break;
				case INPULLUP:
					CLR_BIT(DDRD,pin);
     c1c:	a1 e3       	ldi	r26, 0x31	; 49
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e1 e3       	ldi	r30, 0x31	; 49
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_SetPinDirection+0x33a>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	2a 95       	dec	r18
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_SetPinDirection+0x336>
     c3c:	80 95       	com	r24
     c3e:	84 23       	and	r24, r20
     c40:	8c 93       	st	X, r24
					SET_BIT(PORTD,pin);
     c42:	a2 e3       	ldi	r26, 0x32	; 50
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e2 e3       	ldi	r30, 0x32	; 50
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	48 2f       	mov	r20, r24
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	02 2e       	mov	r0, r18
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <DIO_SetPinDirection+0x362>
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	0a 94       	dec	r0
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <DIO_SetPinDirection+0x35e>
     c64:	84 2b       	or	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	14 c0       	rjmp	.+40     	; 0xc92 <DIO_SetPinDirection+0x394>
					break;
				case INFREE:
					// code here .....
					CLR_BIT(DDRD,pin);
     c6a:	a1 e3       	ldi	r26, 0x31	; 49
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e1 e3       	ldi	r30, 0x31	; 49
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	48 2f       	mov	r20, r24
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 2e       	mov	r0, r18
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_SetPinDirection+0x38a>
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	0a 94       	dec	r0
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_SetPinDirection+0x386>
     c8c:	80 95       	com	r24
     c8e:	84 23       	and	r24, r20
     c90:	8c 93       	st	X, r24
					break;

				}
		break;
		}
	return OK;
     c92:	1c 82       	std	Y+4, r1	; 0x04
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <DIO_SetPinDirection+0x39c>

}	else {
	return NOK;
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	9c 83       	std	Y+4, r25	; 0x04
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
}

}
     c9c:	2e 96       	adiw	r28, 0x0e	; 14
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <DIO_SetPortDirection>:
// function set whole port.
DIOStatus_t DIO_SetPortDirection(DIOPortID_t port,uint8 mask){
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <DIO_SetPortDirection+0x6>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <DIO_SetPortDirection+0x8>
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	6a 83       	std	Y+2, r22	; 0x02
if(port <= PD){
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	a0 f5       	brcc	.+104    	; 0xd2e <DIO_SetPortDirection+0x80>
	switch(port){
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3d 83       	std	Y+5, r19	; 0x05
     cce:	2c 83       	std	Y+4, r18	; 0x04
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	91 05       	cpc	r25, r1
     cd8:	d1 f0       	breq	.+52     	; 0xd0e <DIO_SetPortDirection+0x60>
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	2c f4       	brge	.+10     	; 0xcee <DIO_SetPortDirection+0x40>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	61 f0       	breq	.+24     	; 0xd04 <DIO_SetPortDirection+0x56>
     cec:	1e c0       	rjmp	.+60     	; 0xd2a <DIO_SetPortDirection+0x7c>
     cee:	2c 81       	ldd	r18, Y+4	; 0x04
     cf0:	3d 81       	ldd	r19, Y+5	; 0x05
     cf2:	22 30       	cpi	r18, 0x02	; 2
     cf4:	31 05       	cpc	r19, r1
     cf6:	81 f0       	breq	.+32     	; 0xd18 <DIO_SetPortDirection+0x6a>
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	81 f0       	breq	.+32     	; 0xd22 <DIO_SetPortDirection+0x74>
     d02:	13 c0       	rjmp	.+38     	; 0xd2a <DIO_SetPortDirection+0x7c>
	case PA:
		DDRA = mask;
     d04:	ea e3       	ldi	r30, 0x3A	; 58
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	80 83       	st	Z, r24
     d0c:	0e c0       	rjmp	.+28     	; 0xd2a <DIO_SetPortDirection+0x7c>
		break;
	case PB:
		DDRB = mask;
     d0e:	e7 e3       	ldi	r30, 0x37	; 55
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	80 83       	st	Z, r24
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <DIO_SetPortDirection+0x7c>
		break;
	case PC:
		DDRC = mask;
     d18:	e4 e3       	ldi	r30, 0x34	; 52
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	80 83       	st	Z, r24
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <DIO_SetPortDirection+0x7c>
		break;
	case PD:
		DDRD = mask;
     d22:	e1 e3       	ldi	r30, 0x31	; 49
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	80 83       	st	Z, r24
		break;
	}
	return OK;
     d2a:	1b 82       	std	Y+3, r1	; 0x03
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_SetPortDirection+0x84>
}
else {
	return NOK;
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	9b 83       	std	Y+3, r25	; 0x03
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
 }

}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <DIO_WritePin>:
void DIO_WritePin(DIOPortID_t port,DIOPinID_t pin,uint8 value ){
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <DIO_WritePin+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_WritePin+0x8>
     d4c:	0f 92       	push	r0
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	6a 83       	std	Y+2, r22	; 0x02
     d56:	4b 83       	std	Y+3, r20	; 0x03
	if(port <= PD  && pin <= Pin7){
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	84 30       	cpi	r24, 0x04	; 4
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <DIO_WritePin+0x1c>
     d5e:	d5 c0       	rjmp	.+426    	; 0xf0a <DIO_WritePin+0x1c6>
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	08 f0       	brcs	.+2      	; 0xd68 <DIO_WritePin+0x24>
     d66:	d1 c0       	rjmp	.+418    	; 0xf0a <DIO_WritePin+0x1c6>
		switch(port){
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3d 83       	std	Y+5, r19	; 0x05
     d70:	2c 83       	std	Y+4, r18	; 0x04
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <DIO_WritePin+0x3a>
     d7c:	43 c0       	rjmp	.+134    	; 0xe04 <DIO_WritePin+0xc0>
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	2c f4       	brge	.+10     	; 0xd92 <DIO_WritePin+0x4e>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	71 f0       	breq	.+28     	; 0xdac <DIO_WritePin+0x68>
     d90:	bc c0       	rjmp	.+376    	; 0xf0a <DIO_WritePin+0x1c6>
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	3d 81       	ldd	r19, Y+5	; 0x05
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	09 f4       	brne	.+2      	; 0xd9e <DIO_WritePin+0x5a>
     d9c:	5f c0       	rjmp	.+190    	; 0xe5c <DIO_WritePin+0x118>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_WritePin+0x66>
     da8:	85 c0       	rjmp	.+266    	; 0xeb4 <DIO_WritePin+0x170>
     daa:	af c0       	rjmp	.+350    	; 0xf0a <DIO_WritePin+0x1c6>
		case PA:
			if(HIGH == value){
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	a1 f4       	brne	.+40     	; 0xdda <DIO_WritePin+0x96>
				SET_BIT(PORTA,pin);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_WritePin+0x8c>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_WritePin+0x88>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	98 c0       	rjmp	.+304    	; 0xf0a <DIO_WritePin+0x1c6>
			}else {
				CLR_BIT(PORTA,pin);
     dda:	ab e3       	ldi	r26, 0x3B	; 59
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	eb e3       	ldi	r30, 0x3B	; 59
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_WritePin+0xb4>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_WritePin+0xb0>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	83 c0       	rjmp	.+262    	; 0xf0a <DIO_WritePin+0x1c6>
			}
			break;
		case PB:
			if(HIGH == value){
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	a1 f4       	brne	.+40     	; 0xe32 <DIO_WritePin+0xee>
							SET_BIT(PORTB,pin);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_WritePin+0xe4>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_WritePin+0xe0>
     e2c:	84 2b       	or	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	6c c0       	rjmp	.+216    	; 0xf0a <DIO_WritePin+0x1c6>
						}else {
							CLR_BIT(PORTB,pin);
     e32:	a8 e3       	ldi	r26, 0x38	; 56
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e8 e3       	ldi	r30, 0x38	; 56
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_WritePin+0x10c>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_WritePin+0x108>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	57 c0       	rjmp	.+174    	; 0xf0a <DIO_WritePin+0x1c6>
						}
			break;

		case PC:
			if(HIGH == value){
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	a1 f4       	brne	.+40     	; 0xe8a <DIO_WritePin+0x146>
							SET_BIT(PORTC,pin);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_WritePin+0x13c>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_WritePin+0x138>
     e84:	84 2b       	or	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	40 c0       	rjmp	.+128    	; 0xf0a <DIO_WritePin+0x1c6>
						}else {
							CLR_BIT(PORTC,pin);
     e8a:	a5 e3       	ldi	r26, 0x35	; 53
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e3       	ldi	r30, 0x35	; 53
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_WritePin+0x164>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_WritePin+0x160>
     eac:	80 95       	com	r24
     eae:	84 23       	and	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	2b c0       	rjmp	.+86     	; 0xf0a <DIO_WritePin+0x1c6>
						}
			break;

		case PD:
			if(HIGH == value){
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	a1 f4       	brne	.+40     	; 0xee2 <DIO_WritePin+0x19e>
							SET_BIT(PORTD,pin);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_WritePin+0x194>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_WritePin+0x190>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	14 c0       	rjmp	.+40     	; 0xf0a <DIO_WritePin+0x1c6>
						}else {
							CLR_BIT(PORTD,pin);
     ee2:	a2 e3       	ldi	r26, 0x32	; 50
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e2 e3       	ldi	r30, 0x32	; 50
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_WritePin+0x1bc>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_WritePin+0x1b8>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
						}
			break;

		}
	}
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <DIO_WritePort>:
void DIO_WritePort(DIOPortID_t port,uint8 mask){
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <DIO_WritePort+0x6>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <DIO_WritePort+0x8>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	6a 83       	std	Y+2, r22	; 0x02
	if(port <=PD){
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	84 30       	cpi	r24, 0x04	; 4
     f2e:	90 f5       	brcc	.+100    	; 0xf94 <DIO_WritePort+0x7a>
		switch(port){
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3c 83       	std	Y+4, r19	; 0x04
     f38:	2b 83       	std	Y+3, r18	; 0x03
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	d1 f0       	breq	.+52     	; 0xf78 <DIO_WritePort+0x5e>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	3c 81       	ldd	r19, Y+4	; 0x04
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <DIO_WritePort+0x3e>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	61 f0       	breq	.+24     	; 0xf6e <DIO_WritePort+0x54>
     f56:	1e c0       	rjmp	.+60     	; 0xf94 <DIO_WritePort+0x7a>
     f58:	2b 81       	ldd	r18, Y+3	; 0x03
     f5a:	3c 81       	ldd	r19, Y+4	; 0x04
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	81 f0       	breq	.+32     	; 0xf82 <DIO_WritePort+0x68>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	81 f0       	breq	.+32     	; 0xf8c <DIO_WritePort+0x72>
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <DIO_WritePort+0x7a>
		case PA:
			PORTA = mask;
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	80 83       	st	Z, r24
     f76:	0e c0       	rjmp	.+28     	; 0xf94 <DIO_WritePort+0x7a>
			break;
		case PB:
					PORTB = mask;
     f78:	e8 e3       	ldi	r30, 0x38	; 56
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	80 83       	st	Z, r24
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <DIO_WritePort+0x7a>
					break;
		case PC:
					PORTC = mask;
     f82:	e5 e3       	ldi	r30, 0x35	; 53
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	80 83       	st	Z, r24
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <DIO_WritePort+0x7a>
					break;
		case PD:
					PORTD = mask;
     f8c:	e2 e3       	ldi	r30, 0x32	; 50
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	80 83       	st	Z, r24
					break;

		}
	}
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <DIO_ReadPin>:
uint8 DIO_ReadPin(DIOPortID_t port , DIOPinID_t pin){
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <DIO_ReadPin+0x6>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <DIO_ReadPin+0x8>
     faa:	00 d0       	rcall	.+0      	; 0xfac <DIO_ReadPin+0xa>
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	8a 83       	std	Y+2, r24	; 0x02
     fb2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 v = 0;
     fb4:	19 82       	std	Y+1, r1	; 0x01
	if(port<= PD && pin <= Pin7){
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	84 30       	cpi	r24, 0x04	; 4
     fba:	08 f0       	brcs	.+2      	; 0xfbe <DIO_ReadPin+0x1c>
     fbc:	a0 c0       	rjmp	.+320    	; 0x10fe <DIO_ReadPin+0x15c>
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <DIO_ReadPin+0x24>
     fc4:	9c c0       	rjmp	.+312    	; 0x10fe <DIO_ReadPin+0x15c>
		switch(port){
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3e 83       	std	Y+6, r19	; 0x06
     fce:	2d 83       	std	Y+5, r18	; 0x05
     fd0:	4d 81       	ldd	r20, Y+5	; 0x05
     fd2:	5e 81       	ldd	r21, Y+6	; 0x06
     fd4:	41 30       	cpi	r20, 0x01	; 1
     fd6:	51 05       	cpc	r21, r1
     fd8:	b1 f1       	breq	.+108    	; 0x1046 <DIO_ReadPin+0xa4>
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	91 05       	cpc	r25, r1
     fe2:	34 f4       	brge	.+12     	; 0xff0 <DIO_ReadPin+0x4e>
     fe4:	2d 81       	ldd	r18, Y+5	; 0x05
     fe6:	3e 81       	ldd	r19, Y+6	; 0x06
     fe8:	21 15       	cp	r18, r1
     fea:	31 05       	cpc	r19, r1
     fec:	71 f0       	breq	.+28     	; 0x100a <DIO_ReadPin+0x68>
     fee:	84 c0       	rjmp	.+264    	; 0x10f8 <DIO_ReadPin+0x156>
     ff0:	4d 81       	ldd	r20, Y+5	; 0x05
     ff2:	5e 81       	ldd	r21, Y+6	; 0x06
     ff4:	42 30       	cpi	r20, 0x02	; 2
     ff6:	51 05       	cpc	r21, r1
     ff8:	09 f4       	brne	.+2      	; 0xffc <DIO_ReadPin+0x5a>
     ffa:	43 c0       	rjmp	.+134    	; 0x1082 <DIO_ReadPin+0xe0>
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	91 05       	cpc	r25, r1
    1004:	09 f4       	brne	.+2      	; 0x1008 <DIO_ReadPin+0x66>
    1006:	5b c0       	rjmp	.+182    	; 0x10be <DIO_ReadPin+0x11c>
    1008:	77 c0       	rjmp	.+238    	; 0x10f8 <DIO_ReadPin+0x156>
		case PA:
			v =  GET_BIT(PINA,pin);
    100a:	e9 e3       	ldi	r30, 0x39	; 57
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_ReadPin+0x82>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	2a 95       	dec	r18
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_ReadPin+0x7e>
    1028:	9a 01       	movw	r18, r20
    102a:	28 23       	and	r18, r24
    102c:	39 23       	and	r19, r25
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_ReadPin+0x9a>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_ReadPin+0x96>
    1040:	ca 01       	movw	r24, r20
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	59 c0       	rjmp	.+178    	; 0x10f8 <DIO_ReadPin+0x156>
			break;
		case PB:
		v =  GET_BIT(PINB,pin);
    1046:	e6 e3       	ldi	r30, 0x36	; 54
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_ReadPin+0xbe>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	2a 95       	dec	r18
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_ReadPin+0xba>
    1064:	9a 01       	movw	r18, r20
    1066:	28 23       	and	r18, r24
    1068:	39 23       	and	r19, r25
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_ReadPin+0xd6>
    1074:	55 95       	asr	r21
    1076:	47 95       	ror	r20
    1078:	8a 95       	dec	r24
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_ReadPin+0xd2>
    107c:	ca 01       	movw	r24, r20
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	3b c0       	rjmp	.+118    	; 0x10f8 <DIO_ReadPin+0x156>
		break;
		case PC:
			v =  GET_BIT(PINC,pin);
    1082:	e3 e3       	ldi	r30, 0x33	; 51
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_ReadPin+0xfa>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	2a 95       	dec	r18
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_ReadPin+0xf6>
    10a0:	9a 01       	movw	r18, r20
    10a2:	28 23       	and	r18, r24
    10a4:	39 23       	and	r19, r25
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_ReadPin+0x112>
    10b0:	55 95       	asr	r21
    10b2:	47 95       	ror	r20
    10b4:	8a 95       	dec	r24
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_ReadPin+0x10e>
    10b8:	ca 01       	movw	r24, r20
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	1d c0       	rjmp	.+58     	; 0x10f8 <DIO_ReadPin+0x156>
					break;
		case PD:
			v = GET_BIT(PIND,pin);
    10be:	e0 e3       	ldi	r30, 0x30	; 48
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_ReadPin+0x136>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	2a 95       	dec	r18
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_ReadPin+0x132>
    10dc:	9a 01       	movw	r18, r20
    10de:	28 23       	and	r18, r24
    10e0:	39 23       	and	r19, r25
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_ReadPin+0x14e>
    10ec:	55 95       	asr	r21
    10ee:	47 95       	ror	r20
    10f0:	8a 95       	dec	r24
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_ReadPin+0x14a>
    10f4:	ca 01       	movw	r24, r20
    10f6:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
		return v;
    10f8:	59 81       	ldd	r21, Y+1	; 0x01
    10fa:	5c 83       	std	Y+4, r21	; 0x04
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <DIO_ReadPin+0x15e>

	}
	else {
		return 0;
    10fe:	1c 82       	std	Y+4, r1	; 0x04
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1102:	26 96       	adiw	r28, 0x06	; 6
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <DIO_ReadPort>:
uint8 DIO_ReadPort(DIOPortID_t port){
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_ReadPort+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_ReadPort+0x8>
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	8a 83       	std	Y+2, r24	; 0x02
	if(port<= PD){
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	84 30       	cpi	r24, 0x04	; 4
    1128:	b0 f5       	brcc	.+108    	; 0x1196 <DIO_ReadPort+0x82>
		uint8 mask=0;
    112a:	19 82       	std	Y+1, r1	; 0x01
		switch(port){
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3d 83       	std	Y+5, r19	; 0x05
    1134:	2c 83       	std	Y+4, r18	; 0x04
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	91 05       	cpc	r25, r1
    113e:	d1 f0       	breq	.+52     	; 0x1174 <DIO_ReadPort+0x60>
    1140:	2c 81       	ldd	r18, Y+4	; 0x04
    1142:	3d 81       	ldd	r19, Y+5	; 0x05
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	2c f4       	brge	.+10     	; 0x1154 <DIO_ReadPort+0x40>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	61 f0       	breq	.+24     	; 0x116a <DIO_ReadPort+0x56>
    1152:	1e c0       	rjmp	.+60     	; 0x1190 <DIO_ReadPort+0x7c>
    1154:	2c 81       	ldd	r18, Y+4	; 0x04
    1156:	3d 81       	ldd	r19, Y+5	; 0x05
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	81 f0       	breq	.+32     	; 0x117e <DIO_ReadPort+0x6a>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	91 05       	cpc	r25, r1
    1166:	81 f0       	breq	.+32     	; 0x1188 <DIO_ReadPort+0x74>
    1168:	13 c0       	rjmp	.+38     	; 0x1190 <DIO_ReadPort+0x7c>
		case PA:
			mask = PINA;
    116a:	e9 e3       	ldi	r30, 0x39	; 57
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <DIO_ReadPort+0x7c>
			break;
		case PB:
					mask = PINB;
    1174:	e6 e3       	ldi	r30, 0x36	; 54
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <DIO_ReadPort+0x7c>
					break;
		case PC:
					mask = PINC;
    117e:	e3 e3       	ldi	r30, 0x33	; 51
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <DIO_ReadPort+0x7c>
					break;
		case PD:
					mask = PIND;
    1188:	e0 e3       	ldi	r30, 0x30	; 48
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
		return mask;
    1190:	99 81       	ldd	r25, Y+1	; 0x01
    1192:	9b 83       	std	Y+3, r25	; 0x03
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <DIO_ReadPort+0x84>

	}else {
		return 0;
    1196:	1b 82       	std	Y+3, r1	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <main>:
 *      Author: adham
 */
#include "STD.h"
#include "DIO.h"
#include "ADC.h"
int main(void){
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	2a 97       	sbiw	r28, 0x0a	; 10
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61

//DIO_SetPortDirection(PA,0x00);
	DIO_SetPortDirection(PA,0x00);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_SetPortDirection>
DIO_SetPortDirection(PB,0b11111111);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	6f ef       	ldi	r22, 0xFF	; 255
    11ca:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_SetPortDirection>
ADC_Int();
    11ce:	0e 94 bb 03 	call	0x776	; 0x776 <ADC_Int>
ADC_AutoTriggerConversion(ADC0);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	0e 94 16 04 	call	0x82c	; 0x82c <ADC_AutoTriggerConversion>
uint16 v;
float value;
while(1){

	v = ADC_GETVALUE();
    11d8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <ADC_GETVALUE>
    11dc:	9e 83       	std	Y+6, r25	; 0x06
    11de:	8d 83       	std	Y+5, r24	; 0x05
	value = (float) (v *5)/1024;
    11e0:	2d 81       	ldd	r18, Y+5	; 0x05
    11e2:	3e 81       	ldd	r19, Y+6	; 0x06
    11e4:	c9 01       	movw	r24, r18
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	cc 01       	movw	r24, r24
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 4d 01 	call	0x29a	; 0x29a <__floatunsisf>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	54 e4       	ldi	r21, 0x44	; 68
    1210:	0e 94 41 00 	call	0x82	; 0x82 <__divsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	ab 83       	std	Y+3, r26	; 0x03
    121e:	bc 83       	std	Y+4, r27	; 0x04
	if(value>0 && value<=1.5){
    1220:	1a 86       	std	Y+10, r1	; 0x0a
    1222:	69 81       	ldd	r22, Y+1	; 0x01
    1224:	7a 81       	ldd	r23, Y+2	; 0x02
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 ed 00 	call	0x1da	; 0x1da <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	14 f4       	brge	.+4      	; 0x123e <main+0x94>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	8a 87       	std	Y+10, r24	; 0x0a
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	89 27       	eor	r24, r25
    1244:	88 23       	and	r24, r24
    1246:	d1 f4       	brne	.+52     	; 0x127c <main+0xd2>
    1248:	19 86       	std	Y+9, r1	; 0x09
    124a:	69 81       	ldd	r22, Y+1	; 0x01
    124c:	7a 81       	ldd	r23, Y+2	; 0x02
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 ec       	ldi	r20, 0xC0	; 192
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 1d 01 	call	0x23a	; 0x23a <__lesf2>
    125e:	18 16       	cp	r1, r24
    1260:	14 f0       	brlt	.+4      	; 0x1266 <main+0xbc>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 87       	std	Y+9, r24	; 0x09
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	99 85       	ldd	r25, Y+9	; 0x09
    126a:	89 27       	eor	r24, r25
    126c:	88 23       	and	r24, r24
    126e:	31 f4       	brne	.+12     	; 0x127c <main+0xd2>
		DIO_WritePin(PB,Pin0,HIGH);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_WritePin>
    127a:	3f c0       	rjmp	.+126    	; 0x12fa <main+0x150>
	}
	else if(value >1.5 && value <=3){
    127c:	18 86       	std	Y+8, r1	; 0x08
    127e:	69 81       	ldd	r22, Y+1	; 0x01
    1280:	7a 81       	ldd	r23, Y+2	; 0x02
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 ec       	ldi	r20, 0xC0	; 192
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 ed 00 	call	0x1da	; 0x1da <__gtsf2>
    1292:	18 16       	cp	r1, r24
    1294:	14 f4       	brge	.+4      	; 0x129a <main+0xf0>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	88 87       	std	Y+8, r24	; 0x08
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	89 27       	eor	r24, r25
    12a0:	88 23       	and	r24, r24
    12a2:	d1 f4       	brne	.+52     	; 0x12d8 <main+0x12e>
    12a4:	1f 82       	std	Y+7, r1	; 0x07
    12a6:	69 81       	ldd	r22, Y+1	; 0x01
    12a8:	7a 81       	ldd	r23, Y+2	; 0x02
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e4       	ldi	r20, 0x40	; 64
    12b4:	50 e4       	ldi	r21, 0x40	; 64
    12b6:	0e 94 1d 01 	call	0x23a	; 0x23a <__lesf2>
    12ba:	18 16       	cp	r1, r24
    12bc:	14 f0       	brlt	.+4      	; 0x12c2 <main+0x118>
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	8f 83       	std	Y+7, r24	; 0x07
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	9f 81       	ldd	r25, Y+7	; 0x07
    12c6:	89 27       	eor	r24, r25
    12c8:	88 23       	and	r24, r24
    12ca:	31 f4       	brne	.+12     	; 0x12d8 <main+0x12e>
		DIO_WritePin(PB,Pin1,HIGH);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_WritePin>
    12d6:	11 c0       	rjmp	.+34     	; 0x12fa <main+0x150>
	}
	else if(value > 3){
    12d8:	69 81       	ldd	r22, Y+1	; 0x01
    12da:	7a 81       	ldd	r23, Y+2	; 0x02
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e4       	ldi	r20, 0x40	; 64
    12e6:	50 e4       	ldi	r21, 0x40	; 64
    12e8:	0e 94 ed 00 	call	0x1da	; 0x1da <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	2c f4       	brge	.+10     	; 0x12fa <main+0x150>
		DIO_WritePin(PB,Pin2,HIGH);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 a2 06 	call	0xd44	; 0xd44 <DIO_WritePin>
	}
DIO_WritePort(PB,LOW);
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 8d 07 	call	0xf1a	; 0xf1a <DIO_WritePort>
    1302:	6a cf       	rjmp	.-300    	; 0x11d8 <main+0x2e>

00001304 <__prologue_saves__>:
    1304:	2f 92       	push	r2
    1306:	3f 92       	push	r3
    1308:	4f 92       	push	r4
    130a:	5f 92       	push	r5
    130c:	6f 92       	push	r6
    130e:	7f 92       	push	r7
    1310:	8f 92       	push	r8
    1312:	9f 92       	push	r9
    1314:	af 92       	push	r10
    1316:	bf 92       	push	r11
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	ca 1b       	sub	r28, r26
    132e:	db 0b       	sbc	r29, r27
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	09 94       	ijmp

0000133c <__epilogue_restores__>:
    133c:	2a 88       	ldd	r2, Y+18	; 0x12
    133e:	39 88       	ldd	r3, Y+17	; 0x11
    1340:	48 88       	ldd	r4, Y+16	; 0x10
    1342:	5f 84       	ldd	r5, Y+15	; 0x0f
    1344:	6e 84       	ldd	r6, Y+14	; 0x0e
    1346:	7d 84       	ldd	r7, Y+13	; 0x0d
    1348:	8c 84       	ldd	r8, Y+12	; 0x0c
    134a:	9b 84       	ldd	r9, Y+11	; 0x0b
    134c:	aa 84       	ldd	r10, Y+10	; 0x0a
    134e:	b9 84       	ldd	r11, Y+9	; 0x09
    1350:	c8 84       	ldd	r12, Y+8	; 0x08
    1352:	df 80       	ldd	r13, Y+7	; 0x07
    1354:	ee 80       	ldd	r14, Y+6	; 0x06
    1356:	fd 80       	ldd	r15, Y+5	; 0x05
    1358:	0c 81       	ldd	r16, Y+4	; 0x04
    135a:	1b 81       	ldd	r17, Y+3	; 0x03
    135c:	aa 81       	ldd	r26, Y+2	; 0x02
    135e:	b9 81       	ldd	r27, Y+1	; 0x01
    1360:	ce 0f       	add	r28, r30
    1362:	d1 1d       	adc	r29, r1
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	ed 01       	movw	r28, r26
    1370:	08 95       	ret

00001372 <_exit>:
    1372:	f8 94       	cli

00001374 <__stop_program>:
    1374:	ff cf       	rjmp	.-2      	; 0x1374 <__stop_program>
